{%- set license_classifiers = {
    'Beerware': 'License :: Freely Distributable',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}

[build-system]
requires = ["flit_core>=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "{{ cookiecutter.project_slug }}"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
dynamic = ["version", "description"]

authors = [
    {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}"},
]

# see https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
{%- if cookiecutter.open_source_license in license_classifiers %}
    "{{ license_classifiers[cookiecutter.open_source_license] }}",
{%- endif %}
]

dependencies = [

]

{%- if cookiecutter.remote_git_repo != "" %}
[project.urls]
Source = "{{ cookiecutter.remote_git_repo }}"
{%- endif %}

# [project.scripts]
# script_name = "{{ cookiecutter.project_slug }}:function"

[project.optional-dependencies]
dev = [
    "flit",
    "keyring",
    "pre-commit",
    "ruff",
]
docs = [
    "mkdocs",
    "mkdocstrings[python]",
]
test = [
    "nox",
    "pytest >=4.0.0",
    "pytest-cov",
    "pytest-icdiff",
    "pytest-mock",
    "pytest-randomly",
]


[tool.pytest.ini_options]
markers = [
    "functional: marks tests as functional (deselect with '-m \"not functional\"')",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "-ra",
]

[tool.ruff]
# see https://docs.astral.sh/ruff/configuration/

line-length = 80
indent-width = 4

fixable = ["ALL"]
fix = true

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
    # ignored for now, should be activated in the future
    # docstrings
    "D",

    # don't complain about not annotating self
    "ANN101",

    # ignored, "ruff format" will handle this
    "COM812",
    "ISC001",

    # ignored, due to Windows / WSL2 setup
    # flake8-executable
    "EXE",
]


[tool.ruff.format]
indent-style = "space"

[tool.ruff.per-file-ignores]
# see https://github.com/charliermarsh/ruff
"tests/*" = ["FBT003", "INP001", "PLR2004", "S101", "SLF001", "ANN"]
"noxfile.py" = ["ANN"]

[tool.ruff.pydocstyle]
convention = "pep257"  # Accepts: "google", "numpy", or "pep257".
